// Generated by gencpp from file rviz_teleop_commander/kdanger.msg
// DO NOT EDIT!


#ifndef RVIZ_TELEOP_COMMANDER_MESSAGE_KDANGER_H
#define RVIZ_TELEOP_COMMANDER_MESSAGE_KDANGER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rviz_teleop_commander
{
template <class ContainerAllocator>
struct kdanger_
{
  typedef kdanger_<ContainerAllocator> Type;

  kdanger_()
    : k(0)
    , ids()  {
    }
  kdanger_(const ContainerAllocator& _alloc)
    : k(0)
    , ids(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _k_type;
  _k_type k;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _ids_type;
  _ids_type ids;





  typedef boost::shared_ptr< ::rviz_teleop_commander::kdanger_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rviz_teleop_commander::kdanger_<ContainerAllocator> const> ConstPtr;

}; // struct kdanger_

typedef ::rviz_teleop_commander::kdanger_<std::allocator<void> > kdanger;

typedef boost::shared_ptr< ::rviz_teleop_commander::kdanger > kdangerPtr;
typedef boost::shared_ptr< ::rviz_teleop_commander::kdanger const> kdangerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rviz_teleop_commander::kdanger_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rviz_teleop_commander::kdanger_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rviz_teleop_commander::kdanger_<ContainerAllocator1> & lhs, const ::rviz_teleop_commander::kdanger_<ContainerAllocator2> & rhs)
{
  return lhs.k == rhs.k &&
    lhs.ids == rhs.ids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rviz_teleop_commander::kdanger_<ContainerAllocator1> & lhs, const ::rviz_teleop_commander::kdanger_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rviz_teleop_commander

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rviz_teleop_commander::kdanger_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rviz_teleop_commander::kdanger_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rviz_teleop_commander::kdanger_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rviz_teleop_commander::kdanger_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rviz_teleop_commander::kdanger_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rviz_teleop_commander::kdanger_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rviz_teleop_commander::kdanger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a04d1d0f8657453cc420eb9b555ea1a2";
  }

  static const char* value(const ::rviz_teleop_commander::kdanger_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa04d1d0f8657453cULL;
  static const uint64_t static_value2 = 0xc420eb9b555ea1a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::rviz_teleop_commander::kdanger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rviz_teleop_commander/kdanger";
  }

  static const char* value(const ::rviz_teleop_commander::kdanger_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rviz_teleop_commander::kdanger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 k\n"
"int64[] ids\n"
;
  }

  static const char* value(const ::rviz_teleop_commander::kdanger_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rviz_teleop_commander::kdanger_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.k);
      stream.next(m.ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kdanger_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rviz_teleop_commander::kdanger_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rviz_teleop_commander::kdanger_<ContainerAllocator>& v)
  {
    s << indent << "k: ";
    Printer<int64_t>::stream(s, indent + "  ", v.k);
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RVIZ_TELEOP_COMMANDER_MESSAGE_KDANGER_H
