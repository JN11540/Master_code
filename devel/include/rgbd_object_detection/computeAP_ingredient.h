// Generated by gencpp from file rgbd_object_detection/computeAP_ingredient.msg
// DO NOT EDIT!


#ifndef RGBD_OBJECT_DETECTION_MESSAGE_COMPUTEAP_INGREDIENT_H
#define RGBD_OBJECT_DETECTION_MESSAGE_COMPUTEAP_INGREDIENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rgbd_object_detection
{
template <class ContainerAllocator>
struct computeAP_ingredient_
{
  typedef computeAP_ingredient_<ContainerAllocator> Type;

  computeAP_ingredient_()
    : iou(0.0)
    , confidence(0.0)
    , classification(false)  {
    }
  computeAP_ingredient_(const ContainerAllocator& _alloc)
    : iou(0.0)
    , confidence(0.0)
    , classification(false)  {
  (void)_alloc;
    }



   typedef double _iou_type;
  _iou_type iou;

   typedef double _confidence_type;
  _confidence_type confidence;

   typedef uint8_t _classification_type;
  _classification_type classification;





  typedef boost::shared_ptr< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> const> ConstPtr;

}; // struct computeAP_ingredient_

typedef ::rgbd_object_detection::computeAP_ingredient_<std::allocator<void> > computeAP_ingredient;

typedef boost::shared_ptr< ::rgbd_object_detection::computeAP_ingredient > computeAP_ingredientPtr;
typedef boost::shared_ptr< ::rgbd_object_detection::computeAP_ingredient const> computeAP_ingredientConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator1> & lhs, const ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator2> & rhs)
{
  return lhs.iou == rhs.iou &&
    lhs.confidence == rhs.confidence &&
    lhs.classification == rhs.classification;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator1> & lhs, const ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rgbd_object_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5dbd6052d8bab1fac1b2de3c8bfb4d47";
  }

  static const char* value(const ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5dbd6052d8bab1faULL;
  static const uint64_t static_value2 = 0xc1b2de3c8bfb4d47ULL;
};

template<class ContainerAllocator>
struct DataType< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rgbd_object_detection/computeAP_ingredient";
  }

  static const char* value(const ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 iou\n"
"float64 confidence\n"
"bool classification\n"
;
  }

  static const char* value(const ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.iou);
      stream.next(m.confidence);
      stream.next(m.classification);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct computeAP_ingredient_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator>& v)
  {
    s << indent << "iou: ";
    Printer<double>::stream(s, indent + "  ", v.iou);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "classification: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.classification);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RGBD_OBJECT_DETECTION_MESSAGE_COMPUTEAP_INGREDIENT_H
