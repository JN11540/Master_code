// Generated by gencpp from file rgbd_object_detection/computeAP_id.msg
// DO NOT EDIT!


#ifndef RGBD_OBJECT_DETECTION_MESSAGE_COMPUTEAP_ID_H
#define RGBD_OBJECT_DETECTION_MESSAGE_COMPUTEAP_ID_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rgbd_object_detection/computeAP_ingredient.h>

namespace rgbd_object_detection
{
template <class ContainerAllocator>
struct computeAP_id_
{
  typedef computeAP_id_<ContainerAllocator> Type;

  computeAP_id_()
    : ingredient()  {
    }
  computeAP_id_(const ContainerAllocator& _alloc)
    : ingredient(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> >> _ingredient_type;
  _ingredient_type ingredient;





  typedef boost::shared_ptr< ::rgbd_object_detection::computeAP_id_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rgbd_object_detection::computeAP_id_<ContainerAllocator> const> ConstPtr;

}; // struct computeAP_id_

typedef ::rgbd_object_detection::computeAP_id_<std::allocator<void> > computeAP_id;

typedef boost::shared_ptr< ::rgbd_object_detection::computeAP_id > computeAP_idPtr;
typedef boost::shared_ptr< ::rgbd_object_detection::computeAP_id const> computeAP_idConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rgbd_object_detection::computeAP_id_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rgbd_object_detection::computeAP_id_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rgbd_object_detection::computeAP_id_<ContainerAllocator1> & lhs, const ::rgbd_object_detection::computeAP_id_<ContainerAllocator2> & rhs)
{
  return lhs.ingredient == rhs.ingredient;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rgbd_object_detection::computeAP_id_<ContainerAllocator1> & lhs, const ::rgbd_object_detection::computeAP_id_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rgbd_object_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rgbd_object_detection::computeAP_id_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rgbd_object_detection::computeAP_id_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rgbd_object_detection::computeAP_id_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rgbd_object_detection::computeAP_id_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rgbd_object_detection::computeAP_id_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rgbd_object_detection::computeAP_id_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rgbd_object_detection::computeAP_id_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad8e40b02f261285e7657170912e56c0";
  }

  static const char* value(const ::rgbd_object_detection::computeAP_id_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad8e40b02f261285ULL;
  static const uint64_t static_value2 = 0xe7657170912e56c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::rgbd_object_detection::computeAP_id_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rgbd_object_detection/computeAP_id";
  }

  static const char* value(const ::rgbd_object_detection::computeAP_id_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rgbd_object_detection::computeAP_id_<ContainerAllocator> >
{
  static const char* value()
  {
    return "computeAP_ingredient[] ingredient\n"
"================================================================================\n"
"MSG: rgbd_object_detection/computeAP_ingredient\n"
"float64 iou\n"
"float64 confidence\n"
"bool classification\n"
;
  }

  static const char* value(const ::rgbd_object_detection::computeAP_id_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rgbd_object_detection::computeAP_id_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ingredient);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct computeAP_id_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rgbd_object_detection::computeAP_id_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rgbd_object_detection::computeAP_id_<ContainerAllocator>& v)
  {
    s << indent << "ingredient[]" << std::endl;
    for (size_t i = 0; i < v.ingredient.size(); ++i)
    {
      s << indent << "  ingredient[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rgbd_object_detection::computeAP_ingredient_<ContainerAllocator> >::stream(s, indent + "    ", v.ingredient[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RGBD_OBJECT_DETECTION_MESSAGE_COMPUTEAP_ID_H
