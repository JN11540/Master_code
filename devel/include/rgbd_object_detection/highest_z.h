// Generated by gencpp from file rgbd_object_detection/highest_z.msg
// DO NOT EDIT!


#ifndef RGBD_OBJECT_DETECTION_MESSAGE_HIGHEST_Z_H
#define RGBD_OBJECT_DETECTION_MESSAGE_HIGHEST_Z_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rgbd_object_detection
{
template <class ContainerAllocator>
struct highest_z_
{
  typedef highest_z_<ContainerAllocator> Type;

  highest_z_()
    : high_z()  {
    }
  highest_z_(const ContainerAllocator& _alloc)
    : high_z(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _high_z_type;
  _high_z_type high_z;





  typedef boost::shared_ptr< ::rgbd_object_detection::highest_z_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rgbd_object_detection::highest_z_<ContainerAllocator> const> ConstPtr;

}; // struct highest_z_

typedef ::rgbd_object_detection::highest_z_<std::allocator<void> > highest_z;

typedef boost::shared_ptr< ::rgbd_object_detection::highest_z > highest_zPtr;
typedef boost::shared_ptr< ::rgbd_object_detection::highest_z const> highest_zConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rgbd_object_detection::highest_z_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rgbd_object_detection::highest_z_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rgbd_object_detection::highest_z_<ContainerAllocator1> & lhs, const ::rgbd_object_detection::highest_z_<ContainerAllocator2> & rhs)
{
  return lhs.high_z == rhs.high_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rgbd_object_detection::highest_z_<ContainerAllocator1> & lhs, const ::rgbd_object_detection::highest_z_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rgbd_object_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rgbd_object_detection::highest_z_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rgbd_object_detection::highest_z_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rgbd_object_detection::highest_z_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rgbd_object_detection::highest_z_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rgbd_object_detection::highest_z_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rgbd_object_detection::highest_z_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rgbd_object_detection::highest_z_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1fa59990232b2dddf2b0b21950ccf9db";
  }

  static const char* value(const ::rgbd_object_detection::highest_z_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1fa59990232b2dddULL;
  static const uint64_t static_value2 = 0xf2b0b21950ccf9dbULL;
};

template<class ContainerAllocator>
struct DataType< ::rgbd_object_detection::highest_z_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rgbd_object_detection/highest_z";
  }

  static const char* value(const ::rgbd_object_detection::highest_z_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rgbd_object_detection::highest_z_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] high_z\n"
;
  }

  static const char* value(const ::rgbd_object_detection::highest_z_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rgbd_object_detection::highest_z_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.high_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct highest_z_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rgbd_object_detection::highest_z_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rgbd_object_detection::highest_z_<ContainerAllocator>& v)
  {
    s << indent << "high_z[]" << std::endl;
    for (size_t i = 0; i < v.high_z.size(); ++i)
    {
      s << indent << "  high_z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.high_z[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RGBD_OBJECT_DETECTION_MESSAGE_HIGHEST_Z_H
